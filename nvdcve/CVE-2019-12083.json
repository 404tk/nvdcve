{
  "cve": {
    "data_type": "CVE",
    "data_format": "MITRE",
    "data_version": "4.0",
    "CVE_data_meta": {
      "ID": "CVE-2019-12083",
      "ASSIGNER": "cve@mitre.org"
    },
    "affects": {
      "vendor": {
        "vendor_data": [
          {
            "vendor_name": "rust-lang",
            "product": {
              "product_data": [
                {
                  "product_name": "rust",
                  "version": {
                    "version_data": [
                      {
                        "version_value": "1.34.0",
                        "version_affected": "="
                      },
                      {
                        "version_value": "1.34.1",
                        "version_affected": "="
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "problemtype": {
      "problemtype_data": [
        {
          "description": [
            {
              "lang": "en",
              "value": "CWE-119"
            }
          ]
        }
      ]
    },
    "references": {
      "reference_data": [
        {
          "url": "https://blog.rust-lang.org/2019/05/13/Security-advisory.html",
          "name": "https://blog.rust-lang.org/2019/05/13/Security-advisory.html",
          "refsource": "MISC",
          "tags": [
            "Vendor Advisory"
          ]
        },
        {
          "url": "https://groups.google.com/forum/#!topic/rustlang-security-announcements/aZabeCMUv70",
          "name": "https://groups.google.com/forum/#!topic/rustlang-security-announcements/aZabeCMUv70",
          "refsource": "MISC",
          "tags": [
            "Third Party Advisory"
          ]
        }
      ]
    },
    "description": {
      "description_data": [
        {
          "lang": "en",
          "value": "The Rust Programming Language Standard Library 1.34.x before 1.34.2 contains a stabilized method which, if overridden, can violate Rust's safety guarantees and cause memory unsafety. If the `Error::type_id` method is overridden then any type can be safely cast to any other type, causing memory safety vulnerabilities in safe code (e.g., out-of-bounds write or read). Code that does not manually implement Error::type_id is unaffected."
        }
      ]
    }
  },
  "configurations": {
    "CVE_data_version": "4.0",
    "nodes": [
      {
        "operator": "OR",
        "cpe_match": [
          {
            "vulnerable": true,
            "cpe23Uri": "cpe:2.3:a:rust-lang:rust:*:*:*:*:*:*:*:*",
            "versionStartIncluding": "1.34.0",
            "versionEndExcluding": "1.34.2"
          }
        ]
      }
    ]
  },
  "impact": {
    "baseMetricV3": {
      "cvssV3": {
        "version": "3.0",
        "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "privilegesRequired": "NONE",
        "userInteraction": "NONE",
        "scope": "UNCHANGED",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "baseScore": 8.1,
        "baseSeverity": "HIGH"
      },
      "exploitabilityScore": 2.2,
      "impactScore": 5.9
    },
    "baseMetricV2": {
      "cvssV2": {
        "version": "2.0",
        "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
        "accessVector": "NETWORK",
        "accessComplexity": "MEDIUM",
        "authentication": "NONE",
        "confidentialityImpact": "PARTIAL",
        "integrityImpact": "PARTIAL",
        "availabilityImpact": "PARTIAL",
        "baseScore": 6.8
      },
      "severity": "MEDIUM",
      "exploitabilityScore": 8.6,
      "impactScore": 6.4,
      "acInsufInfo": false,
      "obtainAllPrivilege": false,
      "obtainUserPrivilege": false,
      "obtainOtherPrivilege": false,
      "userInteractionRequired": false
    }
  },
  "publishedDate": "2019-05-13T20:29Z",
  "lastModifiedDate": "2019-05-14T16:28Z"
}